1． 

1． 嵌入式系统的定义，特点。嵌入式系统发展的4个阶段。分类。 

定义：嵌入式系统是“以应用为中心，以计算机技术为基础，软硬件可裁减，适用于应用系统对功能、可靠性、成本、体积、功耗有严格要求的专用计算机系统”。 

v  特点：嵌入式系统通常是形式多样、面向特定应用的 

v  嵌入式系统得到多种类型的处理器和处理器体系结构的支持 

v  嵌入式系统通常极其关注成本 

v  嵌入式系统有实时性和可靠性的要求 

v  嵌入式系统使用的操作系统一般是适应多种处理器、可剪裁、轻量型、实时可靠、可固化的嵌入式操作系统 

v  嵌入式系统开发需要专门工具和特殊方法 

  

四个阶段： 

第一阶段：以四位到八位单片机为核心的可编程控制器系统，同时具有检测伺服指示设备相配合的功能。 

第二阶段：以八位和十六位嵌入式中央处理器为基础，以简单操作系统为核心的嵌入式系统。 

第三阶段：以三十二位RISC嵌入式中央处理器加嵌入式操作系统为标志的嵌入式系统。 

第四阶段：以基于INTERNET接入为表示的嵌入式系统。 

分类 

按嵌入式处理器的位数来分类 

按应用来分类 

军用，工业用和民用，汽车电子，工业控制，移动终端，信息家电等等 

按速度分类 

强实时，一般实时，弱实时 

按确定性来分类 

硬实时，软实时 

按嵌入式系统软件复杂程度来分类： 

//error无操作系统，小型操作系统，大型操作系统控制的嵌入式系统。 

  

  

  

2． 嵌入式系统的基本结构。 

嵌入式系统一般由嵌入式硬件和软件组成 

硬件以微处理器为核心集成存储器和系统专用的输入/输出设备 

软件包括：初始化代码及驱动、嵌入式操作系统和应用程序等，这些软件有机地结合在一起，形成系统特定的一体化软件。 


5级流水线
1、减少了单个周期工作=>避免更高锁的频率
2、分离数据和指令存储=>减少CPI
（单指令周期平均的锁的数量）
1.流水线分支的分开和合并会导致执行的缓慢
2.指令的特殊功能消除代码的small jumps
使流水线得到最佳的flow through
**流水线技术
增加速度--大多数指令在单个周期中执行
一种将每条指令分解多步，并让各步操作重叠，
从而实现几个指令并行处理的技术
分类：
3级流水线
5级 6级
三级流水线
Fetch-Decode-Excecute
取指-译码-执行

指令执行需要三个周期 单个指令周期的吞吐量
取指：从存储器中加载一条指令
译码：识别将要被执行的指令    得到下一周期准备数据
路径需要的控制信号
执行：执行指令 将结果集返回

忙等IO和中断IO*：

使用忙等把一个字符序列写到一个输入设备
#define OUT_CHAR 0x1000
#define OUT_STATUS

char *mystring="Hello,word.";
char *current_char;

current_char=mystring;
while(*current_char!='\0'){
	poke(OUT_CHAR,*current_char);
	while(peek(OUT_STATUS)!=0);
	current_char++;
}

使用忙等I/O将字符从输入设备复制到输出设备
#define IN_DATA 0x1000
#define IN_STATUS 0x1001
#define OUT_DATA 0x1100
#define OUT_STATUS 0x1101

while(true){
	while(peek(IN_STATUS)==0);
	achar=(char)peek(IN_DATA);
	
	poke(OUT_DATA,achar);
	poke(OUT_STATUS,1);
	while(peek(OUT_STATUS)!=0);
}

中断I/O

void input_hander(){
	achar=peek(IN_DATA);
	gotchar=true;
	poke(IN_STATUS,0);
}

void output_handler(){
}
main(){
	while(true){
		if(gotchar){
			poke(OUT_CHAR,achar);
			poke(OUT_STATUS,1);
			gotchar=false;
		}
	}
}
----------------------------------------------------------------------------------------------------------------------------
优化
#define BUF_SIZE 8
char io_buf[BUF_SIZE];
int buf_head=0,buf_tail=0;

int error=0;

void empty_buffer(){//是否为空
	buf_head==buf_tail;
}

void full_buffer(){//是否为满了
	(buf_tail+1)%BUF_SIZE==buf_head;
}

int nchars(){
	if(buf_tail>=buf_head) return buf_tail-buf_head;
	else return BUF_SIZE+buf_tail-buf_head;
}

void add_char(char achar){
	io_buf[buf_tail++]=achar;
	if(buf_tail==BUF_SIZE)
		buf_tail=0;
}

char remove_char(){
	char achar;
	achar=io_buf[buf_head++];
	if(buf_head==BUF_SIZE)
		buf_head=0;
}









ucOS-2
任务主函数

void MyTask(void *pdata){
	while(1){
		do something;
		waiting;
		do something;
	}
}

任务控制块TCB
typedef struct os_tcb
{
栈指针；
INT16U OSTCBId;
链表指针；
OS_event *ostcbeVENTpTR;
void *OSTCBMag;
INT8U OSTCBStat;
INT8U OSTCBPrio;
其他
} OS_TCB;


嵌入式体系结构：
1 驱动层
2 操作系统层
3 中间层
4 应用层

嵌入式系统的调试技术。
交叉调试方式



RTOS
相似的功能：
。多任务级别
。软件和硬件资源管理
。为应用提供基本的OS服务
。从软件应用抽象硬件


GPOS代表 General OS？

RTOS从GPOS中分离出来的不同功能
。嵌入式应用上下文中具有更好的可靠性
。满足应用需要的剪裁能力
。更快的特性
。减少内存需求
。为实时嵌入式系统提供可剪裁的调度策略
。支持无盘化嵌入式系统，允许从ROM或RAM上引导和运行
。对不同硬件平台具有更好的可移植性

ucOS-2II
任务调度：
uC/OD_II进行调度的思想是“近似地每时每刻总让优先级最高的就绪任务
处于运行状态”。为了保证这一点，它在系统或用户任务调用系统函数
及执行中断服务程序结束时总是调用调度器，来确定应该运行的任务并
运行它。

uC/OS_II进行任务调度的依据就是任务就绪表。


近似地每时每刻总让优先级最高的就绪任务处于运行状态 为了保证这一点 它在系统或者用户任务调用系统函数
及执行中断服务程序结束时 总是调用调度器，来决定应该运行的任务并运行它。
进行任务调度的依据就是任务就绪表 。


中断与时钟：
uC/OS_II系统相应中断的过程为：
系统接收到中断请求后，这时如果CPU处于中断允许状态
（即中断时开放的），系统就会中止正在运行的当前任务，
而按照中断向量的指向转而去运行中断服务子程序；当中断服务子程序的运行结束后，
系统将会更根据况返回到被中止的任务继续运行
或者转向运行另一个具有更高优先级别的就绪任务。

按照中断向量的指向转而去运行中断服务子程序 -  





同步与通信：
系统中的多个任务在运行时候，经常需要互相无冲突地访问
同一个共享资源，或者需要相互支持和依赖，甚至有时还要相互加以
必要的限制和制约，才能保证任务的顺利运行。因此，操作系统必须具有对任务
的运行进行协调的能力，从而使任务之间可以无冲突，顺畅地同步运行
而不导致灾难性的后果。
	与人们依靠通信来相互沟通，从而使人际关系和谐
工作顺利的做法一样，计算机系统是依靠任务之间的良好通信来
保证任务与任务的同步的。

任务间通信的管理：事件控制块ECB
。同步与互斥
-临界区
-信号量
。任务间通信
-邮箱
-消息队列

事件控制块ECB
。所有的通信信号都被看成是事件，uC/OS_II通过
事件控制快（ECB）来管理每一个具体事件。

同步与互斥：

。为了实现资源共享，一个操作系统必须提供临界区操作的功能；
。uC/OS采用关闭/打开中断方式来处理临界区代码，从而
避免竞争条件，实现任务间的互斥
。uC/OS定义两个宏来开关中断，即：
OS_ENTER_CRITICAL()和OS_EXIT_CRITICAL();
。这两个宏的定义取决于所用的微处理器，每种微处理器
都有自己的OS_CPU.H文件

任务间通信：
。低级通信
-只能传递状态和整数值等控制信息，传送的信息量小
-如：信号量
。高级通信
-能够传送任意数量的数据
-例如：共享内存、邮箱、消息队列


存储管理：
uC/OS中是实模式存储管理
。不划分内核空间和用户空间，整个系统只有一个地址空间，
即物理内存空间，应用程序和内核程序都能直接对所有的存储单元进行访问；
。系统中的“任务”，实际上都是线程---只有运行上下文和栈是独享的，
其他资源都是共享的。

内存布局：
。代码段（text），数据段（data），bss段、堆空间、栈空间
。内存管理，管的是谁


malloc/free？
。在ANSI C中可以用malloc()和free()两个函数动态地分配内存和释放内存。
在嵌入式实时系统中，容易产生碎片。
。由于内存管理算法的原因，malloc()和free()函数执行时间是不确定的。uC/OS_II
对malloc()和free()函数进行了改进，使得它们可以分配和释放固定大小的内存块。
这样一来malloc()和free()函数的执行时间也是固定的了。

uC/OS中的存储管理
。uC/OS采用的是固定分区的内存管理方法
-uC/OS把连续大块内存按分区来管理，每个分区包含有整数个大小相同的块
-在一个系统中可以有多个内存分区，这样，用户的应用程序就可以从不同的内存
分区中得到不同大小的内存块。但是，特定的内存块在释放时必须重新放回它以前所属
的内存分区；
-采用这样的内存管理算法，上面的内存碎片问题就得到了解决。


IRTOS概念、特点、选型原则*
RTOS（实时操作系统）
概念：
	当外界事件或者数据产生时，能够接受并以足够快的
	速度予以处理，其处理的结果又能在规定的时间内控制生产过程
	或者对处理层系统出快速响应并控制所有任务协调一致运行
	的嵌入式操作系统。
	
特点：
1 高精度计时系统：计时精度
2 系统中断机制 有多级中断嵌套处理机制
3 实时调度机制 及时调度运行实时任务

一、在调度策略和算法上保证有限有限调度实时任务
二 建立更多“安全切换”时间点，保证及时调度实时任务

3 选型原则

【
市场进入时间
可移植性
可利用资源
系统定制能力
成本
中文内核支持
】

1 任务调度机制 
。preempitive scheduling
。RMS
。Deadline Driveb scheduling
2 内存管理 分时模式 与保护模式
3 最小内存开销



RTOS的引导模式
。操作系统引导概念：将操作系统装入内存并开始执行的过程
。按时间效率和空间效率不同的要求，分为两种模
-需要BootLoader的引导模式：节约空间牺牲时间



RMS:
任务按单调速率优先级分配（RMPA）的调度算法
称为单调速率调度RMS。RMPA是指任务的有限级按任务周期T来分配。
它根据任务的执行周期的长度来决定调度优先级，那些具有小的任务执行
周期的任务具有.....可抢占。



1.嵌入式系统的定义，特点。分类典型应用。**
2.嵌入式系统的基本组成。*

4.1嵌入式微处理基础
4.1.1嵌入式微处理器体系结构
	流水线技术*
4.1.2ARM
		中断和异常*
4.3嵌入式系统总线
	4.3.1总线结构：单、双、多*
	4.3.2输入输出编程：忙等IO和中断IO*
5.嵌入式系统软件知识
4.2嵌入式操作系统基础知识
4.2.1IRTOS概念、特点、选型原则（商业化RTOS）*
4.2.4任务管理
	实时系统及任务调度（RMS、EDF算法）**
4.3.3嵌入式软件开发环境
交叉开发（宿主机、目标机）*

6.ucOS-2**
	任务调度、中断与时钟、同步与通信、存储管理
7.bsp，bootloader

rtosd的引导模式*

8.建模**
	有限状态机及其应用
	
	
	
嵌入式系统体系结构：
。驱动层
-板级初始化程序
-与系统软件相关的驱动
-与应用软件相关的驱动
-与应用软件相关的驱动不一定要与操作系统连接

。操作系统层
-嵌入式内核 潜入如TCP/IP网络系统 嵌入式文件系统 
嵌入GUI系统 和电源管理等部分
-嵌入式内核是基础和必备的部分 其他部分根据嵌入式系统需要来确定

。中间件层
-包括 嵌入式JAVA嵌入式DCOM和面向应用领域的中间软件
。应用层
-应用层软件主要由多喝相对独立的应用任务组成
-I/O任务 计算的任务 通信的任务
由操作系统调度各个
	
嵌入式系统定义
嵌入式系统的简称
IEEE：嵌入式系统是“用于控制，监视或者辅助操作机器和设备的装置”
国内：嵌入式系统是一应用为中心，以计算机技术为基础，软硬件可裁剪，适用于应用系统对功能、可靠性、成本、体积、功耗有严格要求的计算机系统
特点：
嵌入式系统通常是形式多样，面向特定应用的
嵌入式系统得到多种类型的处理器和处理器体系结构的支持
嵌入式系统通常极其关注成本
嵌入式系统有实时性和可靠性的要求
嵌入式系统使用的操作系统一般是适应多种处理器，可裁剪，轻量型，实时可靠，可固化的嵌入式操作系统
嵌入式系统开发需要专门工具和特殊方法
分类
按嵌入式处理器的位数来分类：
按应用分类：通信类，信息家电类，汽车电子类，移动终端类，工业控制类
按速度分类：强实时系统（响应时间在毫秒和微秒），一般实时系统（响应时间在几秒），弱实时系统（响应时间在数十秒或更长）
按确定性来分类：硬实时系统（对系统响应时间有严格要求，如果系统响应时间不能满足，就要引起系统崩溃或致命错误）。软实时系统（对系统响应时间有要求，但是如果系统响应时间不能满足，不会导致系统出现致命的错误或崩溃）
典型应用：
嵌入式系统的基本组成
嵌入式系统一般有嵌入式硬件和软件组成
硬件：以微处理器为核心集成存储器和系统专用的输入/输出设备
软件：初始化代码及驱动、嵌入式操作系统和应用程序等，这些软件有机的结合在一起，形成了系统特定的一体化软件
流水线
加快速度，大多数指令在单个周期内执行完
分类
3段
Fetch-Decode-Execute
5段
Fetch-Decode-Execute-Buffer/data-Write/back
减少每个周期的工作-》允许更高的时钟频率
分离数据和指令存储-》减少CPI
6段
在每个分支流水线会刷新和重填，导致执行速度下降
指令集的特殊特性消除代码中的小的跳转来获得最佳的管道执行流
数据阻滞：多装入指令，
控制阻滞：分支指令
挑战指令最少执行2个周期（即在循环最后一次的跳出循环顺序执行下一条指令），最坏多执行2个周期（因为控制阻滞导致两个周期的浪费）
中断和异常
中断
基于子例程调用机制
优先级:NMI不可屏蔽中断
向量：允许中断设备指定中断处理程序
FIQ：fast interrupt request
IRQ:Interrupt request
CPU：Save PC.Copy CPSR to SPSR
Force bits in CPSR to record interrupt
Force PC to vector
Restore proper PC
Restore CPSRE from SPSR
Clear interrupt disable flags
延迟：最差是27个周期
Two cycles to synchronize external request两个周期同步外部请求
Up to 20 cycles to complete current instruction最多20个周期完成当前指令
Three cycles for data abort.三个周期让数据异常终止
Two cycles to enter interrupt handling state两个周期进入中断处理状态
异常：
internally detected error
在指令处理过程中，通常不可预测
总线结构：单双多
Bus allows CPU, memory, devices to communicate
Shared communication medium
A bus is:
A set of wires.
A communications protocol
Bus protocol determines how devices communicate
Devices on the bus go through sequences of states.
Protocols are specified by state machines, one state
machine per actor in the protocol.
May contain asynchronous logic behavior
4次握手
输入输出编程：忙等IO和中断IO
忙等IO
中断IO：设备会主动中断CPU
体系结构
轮转结构
最简单的一种结构
主循环一次检查每个IO设备比提供服务
不存在中断
缺点
最坏响应时间
缺乏优先级
结构缺乏可拓展性
实例
万用数字表
带中断的轮转结构
中断程序处理硬件特别紧急的需求，然后设置标记
主循环轮询这些标记，然后根据这些需求进行后续处理
实例
通信桥接器
优点
为硬件操作提供优先级
缺点
结构带来一定的复杂度
共享数据问题
优先级机制不彻底
任务的最坏的响应时间
函数队列调度结构
更精细的结构
中断程序在一个函数指针队列中添加一个函数指针，以供主程序调用
主程序仅需要从该队列中读取响应的指针并调用函数
引进任务优先级：通过对函数指针排队实现
优点
提供了任务优先级
缺点
程序复杂
实时操作系统
明确提出任务概念
中断程序和任务代码之间的必要信号发送时通过实时操作系统处理的，并不需要使用共享变量来达到这个目标
代码中并没有用循环来决定下一步做什么，
操作系统可以在一个任务运行期间挂起
结构可拓展性强
RTOS
概念：当外界事件或数据产生时，能够接受并已足够的速度处理，处理结果又能在规定时间内控制生产过程或处理系统做出快速响应， 并控制所有实时任务协调一致运行的操作系统
特点：
高度精度计时系统
多级中断机制
实时调度机制
可靠性
可预测性
准确性
高性能
低功耗
规模小
选择原则
任务调度机制
内存管理
最小内存开销
最大中断禁止时间
任务切换时间
内核要求的最小存储器大小
性能
软件组件和设备驱动程序
调试工具
标准兼容性
技术支持
实时系统及任务调度
RMS
EDF
	
	
	
	
	
	
	
	
	
	